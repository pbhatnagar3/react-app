# Lecture 1:
     using the npm i create-react-app -g 
     for making sure that you have the correct node installed, use nvm
     make sure that you are using node > 6 to get all features

# Lecture 2: 2 ways of creating components: stateful components and stateless
    if you don't need the states and would rather just have a simple component
    that does not take any input, you can do the following:
    const App = () => <h1> Hello Stateless </h1>

# Lecture 3: 
    if you don't need the states and would rather just have a simple component
    that does not take any input, you can do the following:
    const App = () => <h1> Hello Stateless </h1>

# Lecture 4

   Setting the properties on objects and also mentionning the props that they 
   expect and how to pass them

# Lecture 5
	props: static types and not to be changed by the component
	state: state maintained by the component and can be mutatied

# Lecture 5
	props: static types and not to be changed by the component
	state: state maintained by the component and can be mutatied

# Lecture 6: Use react components as hildren for other components
	you can have a child component update the state of the parent component

# Lecture 7: access nested data wtih Reacts props.children
	if you want to access the inner children, do it by using the props.children 
	this belongs to the props part since we are getting this static information and we should not be changing it. 


# Lecture 8
	you can do more validation instead of just React.propTypes
	by making a function of component.propTypes and then having functions
	inside of that with 


	text(props, propName, components) {
		if (!(propName in props)) {
			return new Error("FML what would I do without that property")
		}
	}


# Lecture 9
	If you want to evaluate the string before passing it, use the tilde key '
	in the constructor(), you call super() to get the context
	how to have various events tied to something


# Lecture 10
	Using ref with the components, you can make a hook and then using this.refs.<nameOfTheHook> you can hook it togehter. 

