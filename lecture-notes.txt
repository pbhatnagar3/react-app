# Lecture 1:
     using the npm i create-react-app -g 
     for making sure that you have the correct node installed, use nvm
     make sure that you are using node > 6 to get all features

# Lecture 2: 2 ways of creating components: stateful components and stateless
    if you don't need the states and would rather just have a simple component
    that does not take any input, you can do the following:
    const App = () => <h1> Hello Stateless </h1>

# Lecture 3: 
    if you don't need the states and would rather just have a simple component
    that does not take any input, you can do the following:
    const App = () => <h1> Hello Stateless </h1>

# Lecture 4

   Setting the properties on objects and also mentionning the props that they 
   expect and how to pass them

# Lecture 5
	props: static types and not to be changed by the component
	state: state maintained by the component and can be mutatied

# Lecture 5
	props: static types and not to be changed by the component
	state: state maintained by the component and can be mutatied

# Lecture 6: Use react components as hildren for other components
	you can have a child component update the state of the parent component

# Lecture 7: access nested data wtih Reacts props.children
	if you want to access the inner children, do it by using the props.children 
	this belongs to the props part since we are getting this static information and we should not be changing it. 


# Lecture 8
	you can do more validation instead of just React.propTypes
	by making a function of component.propTypes and then having functions
	inside of that with 


	text(props, propName, components) {
		if (!(propName in props)) {
			return new Error("FML what would I do without that property")
		}
	}


# Lecture 9
	If you want to evaluate the string before passing it, use the tilde key '
	in the constructor(), you call super() to get the context
	how to have various events tied to something


# Lecture 10
	Using ref with the components, you can make a hook and then using this.refs.<nameOfTheHook> you can hook it togehter. 


# Lecture 11
	There are various lifecycles of things:
		componentWillMount
		render
		componentDidMount
		componentWillUnmount

	if you want to render a component at a node, you will do
		ReactDOM.render(<App />, document.getElementById('a'))

	and if you want to unmount a document, you do:
		ReactDOM.unmountComponentAtNode(document.getElementById('a'))


# Lecture 12 
	when you are working with lifecycles, remember that 
		componentWillMount: will have access to the state and the props but not the DOM element since it has not been mounted
		componentDidMount: will have access to the DOM element as well
		Make sure that when you are setting an interval, you are removing it too


# Lecture 13
	How to control react components updates when the new props are received
		componentWillReceiveProps(nextProps)
		shouldComponentUpdate(nextProps, nextState)
		componentDidUpdate(preProps, prevState);




# Lecture 14 
	How to make asynchronous calls and use the map functionality of JS to deal with arrays of data

# Lecture 15
	How to use the map and the filter method and how to create dynamic components from JS
	How to do inheritece using HOC and then share the data
	remember that the main funcion of the HOC is to return the innerComponent 
		but make sure that the innerComponent has the correct props and state
		passed to them


# Lecture 16
	making a life JSX transformer


# Lecture 17
	understanding JSX. 
	third argument is the this.props.children
	children is the second argument passed
	and if you want the href or any tags to have custom tags, you need to prepend with `data-`
	if statements are not supported well. Use ternary
	interpolation makes sense

Lecture 18: udnerstanding React.Children
	we can use this.props.children.map
	but if there is only one children, this will throw an error, so we can use the React.Children.map(this.props.children, child -> console.log(child.props.className))
	React.Children.map(this.props.children, child => console.log(child))
	React.Children.toArray(this.props.children)
	React.Children.forEach(this.props.children, child => console.log(child.props.className))
	React.Children.only(this.props.children) // expects only a single child


Lecture 19: React.Children
	React.Children do not return the actual children but returns the discription of the children. So if you want to add more functionality to the children, you will have to use cloneElement to create new elements

	- cloneElement takes in an existing description and an object with the additional functionality that we would want to add 